/*
 * Copyright (c) 2011 Hitesh Shankarrao Jyoti Sathawane, Dombivli, MH, 421201, India.
 * mailto:hiteshsathawane@gmail.com. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in 
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Redistributions in any form must be accompanied by information on
 *    how to obtain complete source code for the WaterMarker software.
 *
 *
 * This software is provided "as is", without warranty of any kind, express or 
 * implied, including but not limited to the warranties of merchantability,   
 * fitness for a particular purpose and noninfringement.  In no event shall
 * Copyright holder be liable for any claim, damages or other liability,
 * whether in an action of contract, tort or otherwise,  arising from,out of
 * or in connection with Watermarker or the use or other dealings in
 * Watermarker.
 */
package GUI;

import WaterMarker.RescaleImage;
import WatermarkHelper.WaterMarkHelper;
import java.awt.*;
import java.awt.Graphics2D;
import java.awt.GraphicsConfiguration;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.RenderingHints;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.geom.AffineTransform;
import java.awt.image.*;
import java.net.URL;
import java.util.ArrayList;
import java.util.Iterator;
import javax.imageio.ImageIO;
import javax.media.jai.JAI;
import javax.swing.JPanel;
import java.awt.image.BufferedImage;
import java.io.File;
import javax.swing.ImageIcon;

/*
 * @author Hitesh Shankarrao Jyoti Sathawane
 * Created on January 13, 2010
 * WaterMarker 3.0
 * PreviewGUI.java
 * The Class is main class to Open Preview GUI
 */
public class PreviewGUI extends javax.swing.JFrame {

    WaterMarkHelper previewHelper;
    Color shapeColor = null;
    boolean isUpdate = false;
    int previewIndex;
    double maxHeight;
    double maxWidth;

    /** Creates new form PreviewGUI */
    public PreviewGUI(WaterMarkHelper helper, double MaxHeight, double MaxWidth, int index) {
        previewHelper = helper;
        previewIndex = index;
        maxHeight = MaxHeight;
        maxWidth = MaxWidth;
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();

        setTitle(previewHelper.getProperty("title.preview.gui"));
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setBackground(new java.awt.Color(51, 51, 51));
        setResizable(false);
        setAlwaysOnTop(true);
        addWindowListener(new WindowAdapter() {

            public void windowClosing(WindowEvent evt) {
                Frame frame = (Frame) evt.getSource();
                frame.dispose();
                previewHelper.setEnable(previewHelper.getMainFrame());
            }
        });
        jPanel1.setBackground(new java.awt.Color(51, 51, 51));

        jLabel1.setFont(new java.awt.Font("Palatino Linotype", 0, 18));
        jLabel1.setForeground(new java.awt.Color(204, 204, 204));
        jLabel1.setText("Preview Panel");

        jLabel2.setFont(new java.awt.Font("Palatino Linotype", 0, 11));
        jLabel2.setForeground(new java.awt.Color(255, 102, 51));
        jLabel2.setText("[?]");
        jLabel2.setToolTipText(previewHelper.getProperty("help.preview"));

        jPanel2.setBackground(new java.awt.Color(51, 51, 51));

        ImageIcon imageIcon = new ImageIcon(PreviewWaterMarkedImagepublic(previewHelper, maxHeight, maxWidth, previewIndex));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setIcon(imageIcon);
        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 770, Short.MAX_VALUE));
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 510, Short.MAX_VALUE));

        jScrollPane1.setViewportView(jPanel2);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup().addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup().addContainerGap().addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 772, Short.MAX_VALUE)).addGroup(jPanel1Layout.createSequentialGroup().addGap(325, 325, 325).addComponent(jLabel1).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 331, Short.MAX_VALUE).addComponent(jLabel2))).addContainerGap()));
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel1Layout.createSequentialGroup().addContainerGap().addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel1).addComponent(jLabel2)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 512, Short.MAX_VALUE).addContainerGap()));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width - 800) / 2, (screenSize.height - 600) / 2, 800, 600);
    }// </editor-fold>

    public static GraphicsConfiguration getDefaultConfiguration() {
        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
        GraphicsDevice gd = ge.getDefaultScreenDevice();
        return gd.getDefaultConfiguration();
    }

    /** Method helps in getting preview of watermarked image
     * 
     */
    public BufferedImage PreviewWaterMarkedImagepublic(final WaterMarkHelper helper, double MaxHeight, double MaxWidth, int index) {
        ArrayList watermarker = helper.getWaterMarkerList();
        try {
            BufferedImage source = null;
            File inputImage = (File) helper.getInputFiles().get(index);
            String inputFileName = inputImage.getPath();
            String inputFileExtension = inputFileName.substring(inputFileName.lastIndexOf(".") + 1);
            if (inputFileExtension.equalsIgnoreCase("tiff") || inputFileExtension.equalsIgnoreCase("tif")) {
                RenderedImage images = JAI.create("fileload", inputImage.getPath());
                source = helper.convertRenderedImage(images);
            } else if (inputFileExtension.equalsIgnoreCase("jpg") || inputFileExtension.equalsIgnoreCase("jpeg") || inputFileExtension.equalsIgnoreCase("jpe") || inputFileExtension.equalsIgnoreCase("jfif") || inputFileExtension.equalsIgnoreCase("png") || inputFileExtension.equalsIgnoreCase("bmp") || inputFileExtension.equalsIgnoreCase("gif")) {
                source = ImageIO.read(new File(inputImage.getPath()));
            } else {
                URL is = getClass().getResource("/image/blank.png");
                try {
                    source = ImageIO.read(is);
                } catch (Exception ex) {
                }
            }
            double height = source.getHeight();
            double width = source.getWidth();
            String imageSizeString = helper.imageSize(height, width, MaxHeight, MaxWidth);
            String[] imageSize = imageSizeString.split("##@@##");
            height = Double.parseDouble(imageSize[0]);
            width = Double.parseDouble(imageSize[1]);
            Object interpolation = RenderingHints.VALUE_INTERPOLATION_BICUBIC;
            int sourceWidth = source.getWidth();
            int sourceHeight = source.getHeight();
            double xScale = ((double) width) / (double) sourceWidth;
            double yScale = ((double) height) / (double) sourceHeight;
            if (height <= 0) {
                xScale = yScale;
                width = (int) Math.rint(xScale * sourceWidth);
            }
            if (height <= 0) {
                yScale = xScale;
                width = (int) Math.rint(yScale * sourceHeight);
            }
            GraphicsConfiguration gc = getDefaultConfiguration();
            BufferedImage result = gc.createCompatibleImage((int) width, (int) height, source.getColorModel().getTransparency());
            Graphics2D g2d = null;
            try {
                g2d = result.createGraphics();
                g2d.setRenderingHint(RenderingHints.KEY_INTERPOLATION, interpolation);

                AffineTransform at = AffineTransform.getScaleInstance(xScale, yScale);
                g2d.drawRenderedImage(source, at);
                JPanel watermarkerPreviewPanels[] = new JPanel[watermarker.size()];
                int panelCount = 0;
                for (Iterator it = watermarker.iterator(); it.hasNext();) {
                    ArrayList waterMarkerList = (ArrayList) it.next();
                    String positionSelect = waterMarkerList.get(10).toString();
                    int hSpace = Integer.parseInt(waterMarkerList.get(13).toString());
                    int vSpace = Integer.parseInt(waterMarkerList.get(14).toString());
                    int x = 0;
                    int y = 0;
                    float fill = (float) (Double.valueOf(waterMarkerList.get(9).toString()) / 100);
                    watermarkerPreviewPanels[panelCount] = new JPanel();
                    watermarkerPreviewPanels[panelCount].setOpaque(false);
                    if (waterMarkerList.get(0).toString().equalsIgnoreCase("TEXT")) {
                        Font font = (Font) waterMarkerList.get(7);
                        FontMetrics outMetrics = g2d.getFontMetrics(font);
                        g2d.setFont(font);
                        g2d.setColor((Color) waterMarkerList.get(8));
                        g2d.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, fill));
                        String WatermarkingText[] = (String[]) waterMarkerList.get(1);
                        int blockHeight = 0;
                        int blockWidth = 0;
                        if (positionSelect.equalsIgnoreCase("Horizontal Top Left")
                                || positionSelect.equalsIgnoreCase("Horizontal Top Center")
                                || positionSelect.equalsIgnoreCase("Horizontal Top Right")
                                || positionSelect.equalsIgnoreCase("Horizontal Middle Left")
                                || positionSelect.equalsIgnoreCase("Horizontal Middle Center")
                                || positionSelect.equalsIgnoreCase("Horizontal Middle Right")
                                || positionSelect.equalsIgnoreCase("Horizontal Bottom Left")
                                || positionSelect.equalsIgnoreCase("Horizontal Bottom Center")
                                || positionSelect.equalsIgnoreCase("Horizontal Bottom Right")
                                || positionSelect.equalsIgnoreCase("Horizontal Coustome")) {
                            // For Horizontal Text
                            for (int r = 0; r < WatermarkingText.length; r++) {
                                java.awt.geom.Rectangle2D rect = outMetrics.getStringBounds(WatermarkingText[r], g2d);
                                int textHeight = (int) (rect.getHeight());
                                int textWidth = (int) (rect.getWidth());
                                blockHeight = blockHeight + textHeight;
                                if (blockWidth < textWidth) {
                                    blockWidth = textWidth;
                                }
                            }

                            java.awt.geom.Rectangle2D rect0Posn = outMetrics.getStringBounds(WatermarkingText[0], g2d);
                            int textHeight0Posn = (int) (rect0Posn.getHeight());
                            int topYposition = vSpace - textHeight0Posn;
                            int middleYPosition = (result.getHeight() / 2) - (blockHeight / 2) - textHeight0Posn + outMetrics.getAscent();
                            int bottomYPosition = result.getHeight() - blockHeight - vSpace - textHeight0Posn + outMetrics.getAscent();
                            int coustomYPosition = Integer.parseInt(waterMarkerList.get(12).toString()) - textHeight0Posn;
                            for (int i = 0; i < WatermarkingText.length; i++) {
                                java.awt.geom.Rectangle2D rect = outMetrics.getStringBounds(WatermarkingText[i], g2d);
                                int textHeight = (int) (rect.getHeight());
                                int textWidth = (int) (rect.getWidth());
                                if (positionSelect.equalsIgnoreCase("Horizontal Top Left")) {
                                    topYposition = topYposition + textHeight;
                                    x = hSpace;
                                    y = topYposition + outMetrics.getAscent();
                                } else if (positionSelect.equalsIgnoreCase("Horizontal Top Center")) {
                                    topYposition = topYposition + textHeight;
                                    x = (result.getWidth() / 2) - (textWidth / 2);
                                    y = topYposition + outMetrics.getAscent();
                                } else if (positionSelect.equalsIgnoreCase("Horizontal Top Right")) {
                                    topYposition = topYposition + textHeight;
                                    x = (result.getWidth()) - (blockWidth) - hSpace;
                                    y = topYposition + outMetrics.getAscent();
                                } else if (positionSelect.equalsIgnoreCase("Horizontal Middle Left")) {
                                    middleYPosition = middleYPosition + textHeight;
                                    x = hSpace;
                                    y = middleYPosition;
                                } else if (positionSelect.equalsIgnoreCase("Horizontal Middle Center")) {
                                    middleYPosition = middleYPosition + textHeight;
                                    x = (result.getWidth() / 2) - (textWidth / 2);
                                    y = middleYPosition;
                                } else if (positionSelect.equalsIgnoreCase("Horizontal Middle Right")) {
                                    middleYPosition = middleYPosition + textHeight;
                                    x = x = (result.getWidth()) - (blockWidth) - hSpace;
                                    y = middleYPosition;
                                } else if (positionSelect.equalsIgnoreCase("Horizontal Bottom Left")) {
                                    bottomYPosition = bottomYPosition + textHeight;
                                    x = hSpace;
                                    y = bottomYPosition;
                                } else if (positionSelect.equalsIgnoreCase("Horizontal Bottom Center")) {
                                    bottomYPosition = bottomYPosition + textHeight;
                                    x = (result.getWidth() / 2) - (textWidth / 2);
                                    y = bottomYPosition;
                                } else if (positionSelect.equalsIgnoreCase("Horizontal Bottom Right")) {
                                    bottomYPosition = bottomYPosition + textHeight;
                                    x = x = (result.getWidth()) - (blockWidth) - hSpace;
                                    y = bottomYPosition;
                                } else if (positionSelect.equalsIgnoreCase("Horizontal Coustome")) {
                                    coustomYPosition = coustomYPosition + textHeight;
                                    x = Integer.parseInt(waterMarkerList.get(11).toString());
                                    y = coustomYPosition;
                                }

                                g2d.drawString(WatermarkingText[i], x, y);
                            }
                        } else if (positionSelect.equalsIgnoreCase("Vertical Top Left")
                                || positionSelect.equalsIgnoreCase("Vertical Top Center")
                                || positionSelect.equalsIgnoreCase("Vertical Top Right")
                                || positionSelect.equalsIgnoreCase("Vertical Middle Left")
                                || positionSelect.equalsIgnoreCase("Vertical Middle Center")
                                || positionSelect.equalsIgnoreCase("Vertical Middle Right")
                                || positionSelect.equalsIgnoreCase("Vertical Bottom Left")
                                || positionSelect.equalsIgnoreCase("Vertical Bottom Center")
                                || positionSelect.equalsIgnoreCase("Vertical Bottom Right")
                                || positionSelect.equalsIgnoreCase("Vertical Coustome")) {
                            //get block height and width
                            ArrayList lineWidthList = new ArrayList();
                            ArrayList lineHeightList = new ArrayList();
                            for (int r = 0; r < WatermarkingText.length; r++) {
                                char[] CurrentLine = WatermarkingText[r].toString().toCharArray();
                                int lineHeight = 0;
                                int lineWidth = 0;
                                for (int i = 0; i < CurrentLine.length; i++) {
                                    String Character = String.valueOf(CurrentLine[i]);
                                    java.awt.geom.Rectangle2D rect = outMetrics.getStringBounds(Character, g2d);
                                    int charHeight = (int) (rect.getHeight());
                                    int charWidth = (int) (rect.getWidth());
                                    lineHeight = lineHeight + charHeight;
                                    if (lineWidth < charWidth) {
                                        lineWidth = charWidth;
                                    }
                                }
                                blockWidth = blockWidth + lineWidth;
                                if (blockHeight < lineHeight) {
                                    blockHeight = lineHeight;
                                }
                                lineWidthList.add(lineWidth);
                                lineHeightList.add(lineHeight);
                            }
                            //get Top Left X & Y Positions
                            int TopLeftXPosition = 0;
                            int TopLeftYPosition = 0;
                            if (positionSelect.equalsIgnoreCase("Vertical Top Left")) {
                                TopLeftXPosition = hSpace;
                                TopLeftYPosition = vSpace;
                            } else if (positionSelect.equalsIgnoreCase("Vertical Top Center")) {
                                TopLeftXPosition = (result.getWidth() / 2) - (blockWidth / 2);
                                TopLeftYPosition = vSpace;
                            } else if (positionSelect.equalsIgnoreCase("Vertical Top Right")) {
                                TopLeftXPosition = (result.getWidth()) - (blockWidth) - hSpace;
                                TopLeftYPosition = vSpace;
                            } else if (positionSelect.equalsIgnoreCase("Vertical Middle Left")) {
                                TopLeftXPosition = hSpace;
                                TopLeftYPosition = (result.getHeight() / 2) - (blockHeight / 2);
                            } else if (positionSelect.equalsIgnoreCase("Vertical Middle Center")) {
                                TopLeftXPosition = (result.getWidth() / 2) - (blockWidth / 2);
                                TopLeftYPosition = (result.getHeight() / 2) - (blockHeight / 2);
                            } else if (positionSelect.equalsIgnoreCase("Vertical Middle Right")) {
                                TopLeftXPosition = x = (result.getWidth()) - (blockWidth) - hSpace;
                                TopLeftYPosition = (result.getHeight() / 2) - (blockHeight / 2);
                            } else if (positionSelect.equalsIgnoreCase("Vertical Bottom Left")) {
                                TopLeftXPosition = hSpace;
                                TopLeftYPosition = (result.getHeight()) - (blockHeight) - vSpace;
                            } else if (positionSelect.equalsIgnoreCase("Vertical Bottom Center")) {
                                TopLeftXPosition = (result.getWidth() / 2) - (blockWidth / 2);
                                TopLeftYPosition = (result.getHeight()) - (blockHeight) - vSpace;
                            } else if (positionSelect.equalsIgnoreCase("Vertical Bottom Right")) {
                                TopLeftXPosition = x = (result.getWidth()) - (blockWidth) - hSpace;
                                TopLeftYPosition = (result.getHeight()) - (blockHeight) - vSpace;
                            } else if (positionSelect.equalsIgnoreCase("Vertical Coustome")) {
                                TopLeftXPosition = Integer.parseInt(waterMarkerList.get(11).toString());
                                TopLeftYPosition = Integer.parseInt(waterMarkerList.get(12).toString());
                            }
                            int currentXPosition = TopLeftXPosition - (Integer.parseInt(lineWidthList.get(0).toString()));
                            for (int r1 = 0; r1 < WatermarkingText.length; r1++) {
                                int lineHeight = Integer.parseInt(lineHeightList.get(r1).toString());
                                int lineWidth = Integer.parseInt(lineWidthList.get(r1).toString());
                                currentXPosition = currentXPosition + lineWidth;
                                char[] CurrentLine = WatermarkingText[r1].toString().toCharArray();
                                String firstChar = WatermarkingText[r1].toString().substring(0, 1);
                                java.awt.geom.Rectangle2D rect0Posn = outMetrics.getStringBounds(firstChar, g2d);
                                int charHeight0Posn = (int) (rect0Posn.getHeight());
                                int currentYPosition = TopLeftYPosition;
                                int modifiedYposition = currentYPosition + ((blockHeight - lineHeight) / 2);
                                for (int i1 = 0; i1 < CurrentLine.length; i1++) {
                                    String Character = String.valueOf(CurrentLine[i1]);
                                    java.awt.geom.Rectangle2D rect = outMetrics.getStringBounds(Character, g2d);
                                    int charHeight = (int) (rect.getHeight());
                                    int charWidth = (int) (rect.getWidth());
                                    modifiedYposition = modifiedYposition + charHeight;
                                    int modifiedXPosition = currentXPosition + ((lineWidth - charWidth) / 2);
                                    g2d.drawString(Character, modifiedXPosition, modifiedYposition);
                                }
                            }
                        } else if (positionSelect.equalsIgnoreCase("Bottom-Top Diognal")
                                || positionSelect.equalsIgnoreCase("Top-Bottom Diognal")) {
                            double resHeight = result.getHeight();
                            double resWidth = result.getWidth();
                            double angle = Math.atan2(resHeight, resWidth);
                            if (positionSelect.equalsIgnoreCase("Bottom-Top Diognal")) {
                                angle = angle * (-1);
                            }
                            for (int r = 0; r < WatermarkingText.length; r++) {
                                java.awt.geom.Rectangle2D rect = outMetrics.getStringBounds(WatermarkingText[r], g2d);
                                int textHeight = (int) (rect.getHeight());
                                int textWidth = (int) (rect.getWidth());
                                blockHeight = blockHeight + textHeight;
                                if (blockWidth < textWidth) {
                                    blockWidth = textWidth;
                                }
                            }
                            java.awt.geom.Rectangle2D rect0Posn = outMetrics.getStringBounds(WatermarkingText[0], g2d);
                            int textHeight0Posn = (int) (rect0Posn.getHeight());
                            int middleYPosition = (result.getHeight() / 2) - (blockHeight / 2) - textHeight0Posn + outMetrics.getAscent();
                            for (int i = 0; i < WatermarkingText.length; i++) {
                                java.awt.geom.Rectangle2D rect = outMetrics.getStringBounds(WatermarkingText[i], g2d);
                                int textHeight = (int) (rect.getHeight());
                                int textWidth = (int) (rect.getWidth());
                                middleYPosition = middleYPosition + textHeight;
                                x = (result.getWidth() / 2) - (textWidth / 2);
                                y = middleYPosition;
                                AffineTransform affineTransform = new AffineTransform();
                                affineTransform.rotate(angle, (result.getWidth() / 2), (result.getHeight() / 2));
                                g2d.transform(affineTransform);
                                g2d.drawString(WatermarkingText[i], x, y);
                                AffineTransform affineTransformRev = new AffineTransform();
                                affineTransformRev.rotate(-angle, (result.getWidth() / 2), (result.getHeight() / 2));
                                g2d.transform(affineTransformRev);
                            }
                        } else {
                            Integer.parseInt("s");
                        }
                    } else if (waterMarkerList.get(0).toString().equalsIgnoreCase("SHAPE")) {
                        int ShapeHeight = Integer.parseInt(waterMarkerList.get(6).toString());
                        int ShapeWidth = Integer.parseInt(waterMarkerList.get(5).toString());
                        if (positionSelect.equalsIgnoreCase("Top Left")) {
                            x = hSpace;
                            y = vSpace;
                        } else if (positionSelect.equalsIgnoreCase("Top Center")) {
                            x = (result.getWidth() / 2) - (ShapeWidth / 2);
                            y = vSpace;
                        } else if (positionSelect.equalsIgnoreCase("Top Right")) {
                            x = (result.getWidth()) - (ShapeWidth) - hSpace;
                            y = vSpace;
                        } else if (positionSelect.equalsIgnoreCase("Middle Left")) {
                            x = hSpace;
                            y = (result.getHeight() / 2) - (ShapeHeight / 2);
                        } else if (positionSelect.equalsIgnoreCase("Middle Center")) {
                            x = (result.getWidth() / 2) - (ShapeWidth / 2);
                            y = (result.getHeight() / 2) - (ShapeHeight / 2);
                        } else if (positionSelect.equalsIgnoreCase("Middle Right")) {
                            x = x = (result.getWidth()) - (ShapeWidth) - hSpace;
                            y = (result.getHeight() / 2) - (ShapeHeight / 2);
                        } else if (positionSelect.equalsIgnoreCase("Bottom Left")) {
                            x = hSpace;
                            y = (result.getHeight()) - (ShapeHeight) - vSpace;
                        } else if (positionSelect.equalsIgnoreCase("Bottom Center")) {
                            x = (result.getWidth() / 2) - (ShapeWidth / 2);
                            y = (result.getHeight()) - (ShapeHeight) - vSpace;
                        } else if (positionSelect.equalsIgnoreCase("Bottom Right")) {
                            x = x = (result.getWidth()) - (ShapeWidth) - hSpace;
                            y = (result.getHeight()) - (ShapeHeight) - vSpace;
                        } else if (positionSelect.equalsIgnoreCase("Coustome")) {
                            x = Integer.parseInt(waterMarkerList.get(11).toString());
                            y = Integer.parseInt(waterMarkerList.get(12).toString());
                        }
                        g2d.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, fill));
                        g2d.setColor((Color) waterMarkerList.get(8));
                        if (waterMarkerList.get(2).toString().equalsIgnoreCase("RECTRANGLE")) {
                            g2d.fillRect(x, y, ShapeWidth, ShapeHeight);
                        } else if (waterMarkerList.get(2).toString().equalsIgnoreCase("OVEL")) {
                            g2d.fillOval(x, y, ShapeWidth, ShapeHeight);
                        } else {
                            Integer.parseInt("s");
                        }
                    } else if (waterMarkerList.get(0).toString().equalsIgnoreCase("IMAGE")) {
                        File f = (File) waterMarkerList.get(3);
                        RenderedImage image2 = JAI.create("fileload", f.getPath());
                        BufferedImage waterMarkImage = helper.convertRenderedImage(image2);
                        double imageScale = Double.parseDouble(waterMarkerList.get(4).toString()) / 100;
                        RescaleImage RescaleImage = new RescaleImage();
                        BufferedImage im2 = RescaleImage.RescaleImage(helper, waterMarkImage, waterMarkImage.getHeight() * imageScale, waterMarkImage.getWidth() * imageScale);
                        if (positionSelect.equalsIgnoreCase("Top Left")) {
                            x = hSpace;
                            y = vSpace;
                        } else if (positionSelect.equalsIgnoreCase("Top Center")) {
                            x = (result.getWidth() / 2) - (im2.getWidth() / 2);
                            y = vSpace;
                        } else if (positionSelect.equalsIgnoreCase("Top Right")) {
                            x = (result.getWidth()) - (im2.getWidth()) - hSpace;
                            y = vSpace;
                        } else if (positionSelect.equalsIgnoreCase("Middle Left")) {
                            x = hSpace;
                            y = (result.getHeight() / 2) - (im2.getHeight() / 2);
                        } else if (positionSelect.equalsIgnoreCase("Middle Center")) {
                            x = (result.getWidth() / 2) - (im2.getWidth() / 2);
                            y = (result.getHeight() / 2) - (im2.getHeight() / 2);
                        } else if (positionSelect.equalsIgnoreCase("Middle Right")) {
                            x = x = (result.getWidth()) - (im2.getWidth()) - hSpace;
                            y = (result.getHeight() / 2) - (im2.getHeight() / 2);
                        } else if (positionSelect.equalsIgnoreCase("Bottom Left")) {
                            x = hSpace;
                            y = (result.getHeight()) - (im2.getHeight()) - vSpace;
                        } else if (positionSelect.equalsIgnoreCase("Bottom Center")) {
                            x = (result.getWidth() / 2) - (im2.getWidth() / 2);
                            y = (result.getHeight()) - (im2.getHeight()) - vSpace;
                        } else if (positionSelect.equalsIgnoreCase("Bottom Right")) {
                            x = x = (result.getWidth()) - (im2.getWidth()) - hSpace;
                            y = (result.getHeight()) - (im2.getHeight()) - vSpace;
                        } else if (positionSelect.equalsIgnoreCase("Coustome")) {
                            x = Integer.parseInt(waterMarkerList.get(11).toString());
                            y = Integer.parseInt(waterMarkerList.get(12).toString());
                        }
                        g2d.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, fill));
                        g2d.drawImage(im2, x, y, null);
                    } else if (waterMarkerList.get(0).toString().equalsIgnoreCase("CAPTION")) {
                        Font font = (Font) waterMarkerList.get(7);
                        FontMetrics outMetrics = g2d.getFontMetrics(font);
                        g2d.setFont(font);
                        g2d.setColor((Color) waterMarkerList.get(8));
                        g2d.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, fill));
                        String WatermarkingText[] = new String[1];
                        int blockHeight = 0;
                        int blockWidth = 0;
                        WatermarkingText[0] = "Currently Showing Sample Caption";
                        // For Horizontal Text
                        for (int r = 0; r < WatermarkingText.length; r++) {
                            java.awt.geom.Rectangle2D rect = outMetrics.getStringBounds(WatermarkingText[r], g2d);
                            int textHeight = (int) (rect.getHeight());
                            int textWidth = (int) (rect.getWidth());
                            blockHeight = blockHeight + textHeight;
                            if (blockWidth < textWidth) {
                                blockWidth = textWidth;
                            }
                        }
                        java.awt.geom.Rectangle2D rect0Posn = outMetrics.getStringBounds(WatermarkingText[0], g2d);
                        int textHeight0Posn = (int) (rect0Posn.getHeight());
                        int topYposition = vSpace - textHeight0Posn;
                        int middleYPosition = (result.getHeight() / 2) - (blockHeight / 2) - textHeight0Posn + outMetrics.getAscent();
                        int bottomYPosition = result.getHeight() - blockHeight - vSpace - textHeight0Posn + outMetrics.getAscent();
                        for (int i = 0; i < WatermarkingText.length; i++) {
                            java.awt.geom.Rectangle2D rect = outMetrics.getStringBounds(WatermarkingText[i], g2d);
                            int textHeight = (int) (rect.getHeight());
                            int textWidth = (int) (rect.getWidth());
                            if (positionSelect.equalsIgnoreCase("Top Left")) {
                                topYposition = topYposition + textHeight;
                                x = hSpace;
                                y = topYposition + outMetrics.getAscent();
                            } else if (positionSelect.equalsIgnoreCase("Top Center")) {
                                topYposition = topYposition + textHeight;
                                x = (result.getWidth() / 2) - (textWidth / 2);
                                y = topYposition + outMetrics.getAscent();
                            } else if (positionSelect.equalsIgnoreCase("Top Right")) {
                                topYposition = topYposition + textHeight;
                                x = (result.getWidth()) - (blockWidth) - hSpace;
                                y = topYposition + outMetrics.getAscent();
                            } else if (positionSelect.equalsIgnoreCase("Middle Left")) {
                                middleYPosition = middleYPosition + textHeight;
                                x = hSpace;
                                y = middleYPosition;
                            } else if (positionSelect.equalsIgnoreCase("Middle Center")) {
                                middleYPosition = middleYPosition + textHeight;
                                x = (result.getWidth() / 2) - (textWidth / 2);
                                y = middleYPosition;
                            } else if (positionSelect.equalsIgnoreCase("Middle Right")) {
                                middleYPosition = middleYPosition + textHeight;
                                x = x = (result.getWidth()) - (blockWidth) - hSpace;
                                y = middleYPosition;
                            } else if (positionSelect.equalsIgnoreCase("Bottom Left")) {
                                bottomYPosition = bottomYPosition + textHeight;
                                x = hSpace;
                                y = bottomYPosition;
                            } else if (positionSelect.equalsIgnoreCase("Bottom Center")) {
                                bottomYPosition = bottomYPosition + textHeight;
                                x = (result.getWidth() / 2) - (textWidth / 2);
                                y = bottomYPosition;
                            } else if (positionSelect.equalsIgnoreCase("Bottom Right")) {
                                bottomYPosition = bottomYPosition + textHeight;
                                x = x = (result.getWidth()) - (blockWidth) - hSpace;
                                y = bottomYPosition;
                            }
                            g2d.drawString(WatermarkingText[i], x, y);
                        }
                    } else {
                        Integer.parseInt("s");
                    }
                    panelCount++;
                }
            } finally {
                if (g2d != null) {
                    g2d.dispose();
                }
            }
            return result;

        } catch (Exception e) {
            return null;
        }

    }
    // Variables declaration - do not modify
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration
}
