/*
 * Copyright (c) 2011 Hitesh Shankarrao Jyoti Sathawane, Dombivli, MH, 421201, India.
 * mailto:hiteshsathawane@gmail.com. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in 
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Redistributions in any form must be accompanied by information on
 *    how to obtain complete source code for the WaterMarker software.
 *
 *
 * This software is provided "as is", without warranty of any kind, express or 
 * implied, including but not limited to the warranties of merchantability,   
 * fitness for a particular purpose and noninfringement.  In no event shall
 * Copyright holder be liable for any claim, damages or other liability,
 * whether in an action of contract, tort or otherwise,  arising from,out of
 * or in connection with Watermarker or the use or other dealings in
 * Watermarker.
 */
package GUI;

import WaterMarker.*;
import WatermarkHelper.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.util.*;
import javax.swing.filechooser.FileFilter;
import java.util.regex.Pattern;
import javax.imageio.ImageIO;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.SpringLayout;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.PlainDocument;

/*
 * @author Hitesh Shankarrao Jyoti Sathawane
 * Created on January 13, 2010
 * WaterMarker 3.0
 * WaterMarkGUI.java
 * The Class is main class to Open Main GUI
 */
public class WaterMarkGUI extends javax.swing.JFrame {

    public WaterMarkGUI() {
        initComponents();
    }
    WatermarkHelper.WaterMarkHelper helper = new WaterMarkHelper();
    File outputImage = null;
    ArrayList inputFileList = new ArrayList();
    javax.swing.JPanel[] jFileListPanel;
    javax.swing.JLabel[] jFileListLabel;
    javax.swing.JLabel[] jFileListLabelCount;
    javax.swing.JLabel[] jFileListLabelStatus;
    int currentIndex = 0;

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        ImagePanel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jTextField3 = new NumericTextField();
        jTextField4 = new NumericTextField();
        jPanel3 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel11 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel10 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox();
        jButton11 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();

        helper.readPropertyFile();
        helper.setMainFrame(this);
        helper.setMainPanel(jPanel1);
        helper.setMainProgressBar(jProgressBar1);
        helper.setMainStatus(jLabel4);
        helper.setMainWaterMarksDetails(jPanel10);
        helper.setInPutImageTextField(jTextField1);
        helper.setOutPutImageTextField(jTextField2);
        helper.setOutputFolderName(helper.getDate());
        helper.setInputFiles(new ArrayList());
        helper.setInputFilesCaption(new ArrayList());
        worker = new Thread(new WaterMarkImages(helper, jFileListLabelStatus));
        helper.setWorker(worker);
        helper.setStop(false);
        helper.setPause(false);
        helper.setLogParam();
        helper.setExtensions();
        helper.setImageFormats();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Hitesh S J Sathawane Watermarker 3.0");
        setResizable(false);
        setBackground(new java.awt.Color(51, 51, 51));

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));

        jLabel1.setFont(new java.awt.Font("Palatino Linotype", 1, 18));
        jLabel1.setForeground(new java.awt.Color(204, 204, 204));
        jLabel1.setText("Watermarker");

        jLabel2.setFont(new java.awt.Font("Palatino Linotype", 0, 11));
        jLabel2.setForeground(new java.awt.Color(255, 102, 0));
        jLabel2.setText("[?]");
        jLabel2.setToolTipText(helper.getProperty("help.Main"));
        jPanel2.setBackground(new java.awt.Color(51, 51, 51));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 153, 255), 1, true), "Select Image & Set Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Palatino Linotype", 0, 11), new java.awt.Color(0, 153, 255))); // NOI18N

        jLabel5.setFont(new java.awt.Font("Palatino Linotype", 0, 11));
        jLabel5.setForeground(new java.awt.Color(204, 204, 204));
        jLabel5.setText("Select Type");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"Singe Image", "Multiple Images", "All Images in Folder", "All Images in Folder-Subfolders"}));
        jComboBox1.setToolTipText("Select if to watermark Image or multiple Images or all images in folder");

        jLabel6.setFont(new java.awt.Font("Palatino Linotype", 0, 11));
        jLabel6.setForeground(new java.awt.Color(204, 204, 204));
        jLabel6.setText("Select Images");

        jButton1.setText("Brows");
        jButton1.setToolTipText("Select Image / Images ");
        jButton1.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextField1.setText("Select Images");
        jTextField1.setToolTipText("Input Image Path");
        jTextField1.setEditable(false);
        jTextField1.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1ActionPerformed1(evt);
            }
        });
        jLabel7.setFont(new java.awt.Font("Palatino Linotype", 0, 11));
        jLabel7.setForeground(new java.awt.Color(204, 204, 204));
        jLabel7.setText("Image Format");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"jpg", "pdf"}));

        jLabel8.setFont(new java.awt.Font("Palatino Linotype", 0, 11));
        jLabel8.setForeground(new java.awt.Color(204, 204, 204));
        jLabel8.setText("Output Folder");

        jButton2.setText("Brows");
        jButton2.setToolTipText("Select Folder to save output Image / Images");
        jButton2.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });


        jTextField2.setText("Output Folder");
        jTextField2.setToolTipText("Output Path");
        jTextField2.setEditable(false);
        jTextField2.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BrowsOutput(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Palatino Linotype", 0, 11));
        jLabel9.setForeground(new java.awt.Color(204, 204, 204));
        jLabel9.setText("Max Height");

        jLabel10.setFont(new java.awt.Font("Palatino Linotype", 0, 11));
        jLabel10.setForeground(new java.awt.Color(204, 204, 204));
        jLabel10.setText("Max Width");

        jTextField3.setText("600");
        jTextField3.setToolTipText("Maximum Height in pixals");
        jTextField3.addFocusListener(new java.awt.event.FocusAdapter() {

            public void focusLost(java.awt.event.FocusEvent evt) {
                MaxHeightCheckNumber(evt);
            }
        });

        jTextField4.setText("800");
        jTextField4.setToolTipText("Maximum Width in pixals");
        jTextField4.addFocusListener(new java.awt.event.FocusAdapter() {

            public void focusLost(java.awt.event.FocusEvent evt) {
                MaxWidthCheckNumber(evt);
            }
        });
        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel2Layout.createSequentialGroup().addContainerGap().addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false).addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false).addComponent(jComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(jTextField3, javax.swing.GroupLayout.Alignment.TRAILING).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup().addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false).addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false).addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false).addComponent(jTextField4).addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE).addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)).addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel2Layout.createSequentialGroup().addContainerGap().addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel6).addComponent(jButton1).addComponent(jLabel5).addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel7).addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jLabel8).addComponent(jButton2).addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel10).addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addComponent(jLabel9)).addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));

        jPanel3.setBackground(new java.awt.Color(51, 51, 51));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 153, 255), 1, true), "Image List", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Palatino Linotype", 0, 11), new java.awt.Color(0, 153, 255))); // NOI18N

        jPanel7.setBackground(new java.awt.Color(51, 51, 51));
        jPanel7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 255)));
        jPanel7.setForeground(new java.awt.Color(51, 51, 51));

        ImagePanel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
                jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(ImagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE));
        jPanel7Layout.setVerticalGroup(
                jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(ImagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE));

        jButton3.setText("Preview");
        jButton3.setToolTipText("Preview");
        jButton3.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Preview(evt);
            }
        });
        jPanel6.setBackground(new java.awt.Color(51, 51, 51));

        jPanel11.setBackground(new java.awt.Color(51, 51, 51));

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
                jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 441, Short.MAX_VALUE));
        jPanel11Layout.setVerticalGroup(
                jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 119, Short.MAX_VALUE));

        jScrollPane2.setViewportView(jPanel11);

        jLabel11.setFont(new java.awt.Font("Palatino Linotype", 0, 10));
        jLabel11.setForeground(new java.awt.Color(0, 153, 255));
        jLabel11.setText("File: ");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
                jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel6Layout.createSequentialGroup().addContainerGap().addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 443, Short.MAX_VALUE).addComponent(jLabel11)).addContainerGap()));
        jPanel6Layout.setVerticalGroup(
                jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup().addContainerGap().addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE).addGap(7, 7, 7).addComponent(jLabel11)));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
                jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup().addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false).addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)).addContainerGap()));
        jPanel3Layout.setVerticalGroup(
                jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel3Layout.createSequentialGroup().addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel3Layout.createSequentialGroup().addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jButton3)).addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)).addContainerGap()));
        jPanel4.setBackground(new java.awt.Color(51, 51, 51));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 153, 255), 1, true), "Function Panel", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 153, 255))); // NOI18N

        jPanel8.setBackground(new java.awt.Color(51, 51, 51));

        jButton4.setText("Start");
        jButton4.setToolTipText("Start Watermarking");
        jButton4.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Start(evt);
            }
        });


        jButton5.setText("Reset");
        jButton5.setToolTipText("Reset");
        jButton5.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reset(evt);
            }
        });

        jButton6.setText("Pause");
        jButton6.setToolTipText("Pause/Resume Watermarking");
        jButton6.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Pause(evt);
            }
        });

        jButton7.setText("Import");
        jButton7.setToolTipText("Import Settings from external file");
        jButton7.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importSettingsAction(evt);
            }
        });

        jButton8.setText("Stop");
        jButton8.setToolTipText("Stop Watermarking");
        jButton8.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Stop(evt);
            }
        });

        jButton9.setText("Export");
        jButton9.setToolTipText("Export settings to external folder");
        jButton9.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportSettingsAction(evt);
            }
        });

        jButton10.setText("Exit");
        jButton10.setToolTipText("Stop the Program and Exit");
        jButton10.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exit(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
                jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel8Layout.createSequentialGroup().addContainerGap().addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false).addComponent(jButton10, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(jButton6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(jButton4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE).addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false).addComponent(jButton7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(jButton9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(jButton5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)).addContainerGap()));
        jPanel8Layout.setVerticalGroup(
                jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel8Layout.createSequentialGroup().addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jButton4).addComponent(jButton5)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jButton7).addComponent(jButton6)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jButton9).addComponent(jButton8)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jButton10)));

        jPanel9.setBackground(new java.awt.Color(51, 51, 51));

        jPanel10.setBackground(new java.awt.Color(51, 51, 51));

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
                jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 416, Short.MAX_VALUE));
        jPanel10Layout.setVerticalGroup(
                jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 100, Short.MAX_VALUE));

        jScrollPane3.setViewportView(jPanel10);

        jLabel12.setBackground(new java.awt.Color(204, 204, 204));
        jLabel12.setFont(new java.awt.Font("Palatino Linotype", 0, 11));
        jLabel12.setForeground(new java.awt.Color(204, 204, 204));
        jLabel12.setText("Add Watermarker");

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"Text", "Image", "Shape", "Caption"}));
        jComboBox3.setToolTipText("Select type of Watermark to be added");

        jButton11.setText("Add");
        jButton11.setToolTipText("Add Watermarkers");
        jButton11.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addWaterMarkers(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
                jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel9Layout.createSequentialGroup().addComponent(jLabel12).addGap(35, 35, 35).addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE).addGap(18, 18, 18).addComponent(jButton11, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)).addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 399, Short.MAX_VALUE));
        jPanel9Layout.setVerticalGroup(
                jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel9Layout.createSequentialGroup().addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel12).addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jButton11)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE).addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
                jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel4Layout.createSequentialGroup().addContainerGap().addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addContainerGap()));
        jPanel4Layout.setVerticalGroup(
                jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel4Layout.createSequentialGroup().addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addContainerGap()));
        jPanel5.setBackground(new java.awt.Color(51, 51, 51));

        jLabel3.setFont(new java.awt.Font("Palatino Linotype", 0, 11));
        jLabel3.setForeground(new java.awt.Color(51, 153, 255));
        jLabel3.setText("Status Bar:");

        jLabel4.setFont(new java.awt.Font("Palatino Linotype", 0, 10));
        jLabel4.setForeground(new java.awt.Color(51, 153, 255));
        jLabel4.setText("");

        jProgressBar1.setForeground(new java.awt.Color(0, 153, 255));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
                jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel5Layout.createSequentialGroup().addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE).addGap(18, 18, 18).addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)));
        jPanel5Layout.setVerticalGroup(
                jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel3).addComponent(jLabel4)).addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel1Layout.createSequentialGroup().addContainerGap().addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false).addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)).addGroup(jPanel1Layout.createSequentialGroup().addComponent(jLabel1).addGap(245, 245, 245).addComponent(jLabel2))).addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)).addContainerGap()));
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel1Layout.createSequentialGroup().addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel2).addComponent(jLabel1)).addGap(1, 1, 1).addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap(31, Short.MAX_VALUE)));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width - 659) / 2, (screenSize.height - 563) / 2, 659, 563);
    }// </editor-fold>

    /**
     * X position validation .
     *
     * @param Focus loose event
     */
    private void MaxHeightCheckNumber(java.awt.event.FocusEvent evt) {
        String XVal = jTextField3.getText();
        if (!helper.checkInteger(XVal)) {
            jTextField3.setText("600");
            javax.swing.JOptionPane.showMessageDialog(jPanel1, "Setting Maximum Height 600");
        }
    }

    /**
     * Y position validation .
     *
     * @param Focus loose event
     */
    private void MaxWidthCheckNumber(java.awt.event.FocusEvent evt) {
        String XVal = jTextField4.getText();
        if (!helper.checkInteger(XVal)) {
            javax.swing.JOptionPane.showMessageDialog(jPanel1, "Setting Maximum Height 800");
            jTextField4.setText("800");
        }
    }

    @SuppressWarnings("unchecked")
    private void jButton1ActionPerformed1(java.awt.event.MouseEvent evt) {
        browsInputImage();
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
        browsInputImage();
    }

    public void setFileList() {
        if (!inputFileList.isEmpty()) {
            jFileListPanel = new javax.swing.JPanel[inputFileList.size()];
            jFileListLabel = new javax.swing.JLabel[inputFileList.size()];
            jFileListLabelCount = new javax.swing.JLabel[inputFileList.size()];
            jFileListLabelStatus = new javax.swing.JLabel[inputFileList.size()];
            jPanel11.setLayout(new SpringLayout());
            int i = 0;
            RescaleImage previewImage = new RescaleImage();
            for (Iterator it = inputFileList.iterator(); it.hasNext();) {
                String textval = "";
                String texts[] = new String[1];
                jFileListPanel[i] = new JPanel();
                jFileListPanel[i].setBackground(new java.awt.Color(51, 51, 51));
                jFileListPanel[i].setLayout(new BoxLayout(jFileListPanel[i], BoxLayout.X_AXIS));
                jFileListLabel[i] = new JLabel();
                jFileListLabelCount[i] = new JLabel();
                jFileListLabelStatus[i] = new JLabel();
                BufferedImage source = null;
                URL is = getClass().getResource("/image/blank.png");
                try {
                    source = ImageIO.read(is);
                } catch (IOException ex) {
                }
                source = previewImage.RescaleImage(helper, source, 15, 15);
                ImageIcon i2i = new ImageIcon(source);
                jFileListLabelStatus[i].setIcon(i2i);
                int count = i + 1;
                jFileListLabelCount[i].setText("[" + count + "]  ");
                File inputfile = (File) it.next();
                String text = "  " + inputfile.getPath();
                jFileListLabel[i].setText(text);
                jFileListLabel[i].setBackground(new java.awt.Color(51, 51, 51));
                jFileListLabel[i].setForeground(new java.awt.Color(255, 153, 0));
                jFileListLabelCount[i].setForeground(new java.awt.Color(255, 153, 0));
                final int index = i;
                jFileListLabel[i].addMouseListener(new java.awt.event.MouseAdapter() {

                    public void mouseClicked(java.awt.event.MouseEvent evt) {
                        SetSelection(evt, index);
                    }
                });
                jFileListPanel[i].add(jFileListLabelCount[i]);
                jFileListPanel[i].add(jFileListLabelStatus[i]);
                jFileListPanel[i].add(jFileListLabel[i]);
                jPanel11.add(jFileListPanel[i]);
                jPanel11.revalidate();
                jPanel11.repaint();
                i++;
            }
            SpringUtilities.makeCompactGrid(jPanel11, //parent
                    inputFileList.size(), 1,
                    3, 3, //initX, initY
                    3, 3);
            jFileListPanel[0].setBackground(new java.awt.Color(255, 255, 153));
            File firstImage = (File) inputFileList.get(0);
            BufferedImage image = helper.getPreview(firstImage);
            String selectedFilePath = firstImage.getPath();
            if (selectedFilePath.length() > 70) {
                selectedFilePath = selectedFilePath.substring(0, 70) + "...";
            }
            jLabel11.setText(selectedFilePath);
            BufferedImage result = previewImage.RescaleImage(helper, image, 90, 120);
            ImageIcon i2i = new ImageIcon(result);
            ImagePanel.setIcon(i2i);
            jPanel11.repaint();
            jPanel11.revalidate();

        }
    }

    private void SetSelection(java.awt.event.MouseEvent evt, int index) {
        currentIndex = index;
        File firstImage = (File) inputFileList.get(index);
        BufferedImage image = helper.getPreview(firstImage);
        String selectedFilePath = firstImage.getPath();
        if (selectedFilePath.length() > 70) {
            selectedFilePath = selectedFilePath.substring(0, 70) + "...";
        }
        jLabel11.setText(selectedFilePath);
        for (int x = 0; x < jFileListPanel.length; x++) {
            jFileListPanel[x].setBackground(new java.awt.Color(51, 51, 51));
        }
        jFileListPanel[index].setBackground(new java.awt.Color(255, 255, 153));
        RescaleImage previewImage = new RescaleImage();
        BufferedImage result = previewImage.RescaleImage(helper, image, 90, 120);
        ImageIcon i2i = new ImageIcon(result);
        ImagePanel.setIcon(i2i);
        jPanel11.repaint();
        jPanel11.revalidate();

    }

    /**
     * Add images to be watermarked to ImageGUI Watermarking list
     *
     */
    public void browsInputImage() {

        if (jComboBox1.getSelectedItem().toString().equalsIgnoreCase("Singe Image")) {
            jFileChooser1 = new javax.swing.JFileChooser(".");
            ImagePreviewPanel preview = new ImagePreviewPanel();
            jFileChooser1.setAccessory(preview);
            jFileChooser1.addPropertyChangeListener(preview);
            FileFilter filter1 = new ExtensionFileFilter("Images", helper.getImageFormats());
            jFileChooser1.setFileFilter(filter1);
            jFileChooser1.setMultiSelectionEnabled(false);
            int option = jFileChooser1.showOpenDialog(WaterMarkGUI.this);
            if (option == jFileChooser1.APPROVE_OPTION) {
                String filelist = "Select Image";
                File inputFile = jFileChooser1.getSelectedFile();
                inputFileList = new ArrayList();
                helper.setCompleteImageList(0);
                if (helper.checkExtension(inputFile.getName())) {
                    inputFileList.add(inputFile);
                    String text[] = new String[1];
                    helper.getInputFilesCaption().add(text);
                }
                if (!inputFileList.isEmpty()) {
                    jProgressBar1.setValue(0);
                    helper.setInputFiles(inputFileList);
                    filelist = inputFile.getPath();
                    jTextField1.setText(filelist);
                    jTextField1.setToolTipText(jTextField1.getText());
                    helper.setInputParentFolderPath(inputFile.getParentFile());
                    jPanel11.removeAll();
                    setFileList();
                } else {
                    javax.swing.JOptionPane.showMessageDialog(jPanel1, "Select Images");
                }
            }
        } else if (jComboBox1.getSelectedItem().toString().equalsIgnoreCase("Multiple Images")) {
            helper.setDisable(this);
            java.awt.EventQueue.invokeLater(new Runnable() {

                public void run() {
                    new MultipleImageAddGUI(helper, WaterMarkGUI.this, jTextField1).setVisible(true);
                }
            });

        } else if (jComboBox1.getSelectedItem().toString().equalsIgnoreCase("All Images in Folder")) {
            jFileChooser1 = new javax.swing.JFileChooser();
            jFileChooser1.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
            int option = jFileChooser1.showOpenDialog(WaterMarkGUI.this);
            if (option == jFileChooser1.APPROVE_OPTION) {
                File inputDirectory = jFileChooser1.getSelectedFile();
                FileFilter filter1 = new ExtensionFileFilter("Images", helper.getImageFormats());
                File[] inputfiles = inputDirectory.listFiles();
                inputFileList = new ArrayList();
                helper.setCompleteImageList(0);
                for (int i = 0; i < inputfiles.length; i++) {
                    File file = inputfiles[i];
                    if (helper.checkExtension(file.getName())) {
                        inputFileList.add(file);
                        String textval = "";
                        String text[] = new String[1];
                        helper.getInputFilesCaption().add(text);
                    }
                }
                if (!inputFileList.isEmpty()) {
                    jProgressBar1.setValue(0);
                    helper.setInputFiles(inputFileList);
                    jTextField1.setText(inputDirectory.getPath());
                    jTextField1.setToolTipText(jTextField1.getText());
                    helper.setInputParentFolderPath(inputDirectory);
                    jPanel11.removeAll();
                    setFileList();
                } else {
                    javax.swing.JOptionPane.showMessageDialog(jPanel1, "Folder do not contain any JPEG Image file");
                }
            }
        } else if (jComboBox1.getSelectedItem().toString().equalsIgnoreCase("All Images in Folder-Subfolders")) {
            jFileChooser1 = new javax.swing.JFileChooser();
            jFileChooser1.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
            int option = jFileChooser1.showOpenDialog(WaterMarkGUI.this);
            if (option == jFileChooser1.APPROVE_OPTION) {
                File inputDirectory = jFileChooser1.getSelectedFile();
                FileFilter filter1 = new ExtensionFileFilter("Images", helper.getImageFormats());
                inputFileList = new ArrayList();
                helper.setCompleteImageList(0);
                showDir(inputDirectory);
                if (!inputFileList.isEmpty()) {
                    jProgressBar1.setValue(0);
                    helper.setInputFiles(inputFileList);
                    jTextField1.setText(inputDirectory.getPath());
                    jTextField1.setToolTipText(jTextField1.getText());
                    helper.setInputParentFolderPath(inputDirectory);
                    jPanel11.removeAll();
                    setFileList();
                } else {
                    javax.swing.JOptionPane.showMessageDialog(jPanel1, "Folder do not contain any JPEG Image file");
                }
            }
        }
    }

    /**
     * getPreview of current watermarking
     *
     */
    private void Preview(java.awt.event.ActionEvent evt) {
        try {
            if (!inputFileList.isEmpty()) {
                final double MaxHeight = Double.parseDouble(jTextField3.getText());
                final double MaxWidth = Double.parseDouble(jTextField4.getText());
                final int index = currentIndex;
                helper.setDisable(this);
                helper.setDisable(this);
                java.awt.EventQueue.invokeLater(new Runnable() {

                    public void run() {
                        new PreviewGUI(helper, MaxHeight, MaxWidth, index).setVisible(true);
                    }
                });
            } else {
            }
        } catch (Exception exception) {
        }

    }

    /**
     * show path of File or  Direcotry which is selected
     * @param File file
     */
    public void showDir(File file) {
        if (helper.checkExtension(file.getName())) {
            inputFileList.add(file);
            String textval = "";
            String text[] = new String[1];
            helper.getInputFilesCaption().add(text);
        }
        if (file.isDirectory()) {
            File[] files = file.listFiles();
            for (int i = 0; i < files.length; i++) {
                showDir(files[i]);
            }
        }
    }

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
        browsOutputImage();
    }

    private void BrowsOutput(java.awt.event.MouseEvent evt) {
        browsOutputImage();
    }

    /**
     * Brows Output ImageGUI
     *
     */
    public void browsOutputImage() {
        jFileChooser2 = new javax.swing.JFileChooser();
        jFileChooser2.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
        int option = jFileChooser2.showOpenDialog(WaterMarkGUI.this);
        if (option == jFileChooser2.APPROVE_OPTION) {
            outputImage = jFileChooser2.getSelectedFile();
            jTextField2.setText(outputImage.getPath());
            jTextField2.setToolTipText(jTextField2.getText());
        }
    }

    /**
     * opens respective watermarking panel for adding watermarker
     * @param  Button click event
     * 
     */
    private void addWaterMarkers(java.awt.event.ActionEvent evt) {
        if (!inputFileList.isEmpty()) {
            helper.setDisable(this);
            if (jComboBox3.getSelectedItem().toString().equalsIgnoreCase("Text")) {
                java.awt.EventQueue.invokeLater(new Runnable() {

                    public void run() {
                        new TextGUI(helper).setVisible(true);
                    }
                });

            } else if (jComboBox3.getSelectedItem().toString().equalsIgnoreCase("Image")) {
                java.awt.EventQueue.invokeLater(new Runnable() {

                    public void run() {
                        new ImageGUI(helper).setVisible(true);
                    }
                });
            } else if (jComboBox3.getSelectedItem().toString().equalsIgnoreCase("Caption")) {
                java.awt.EventQueue.invokeLater(new Runnable() {

                    public void run() {
                        new CaptionGUI(helper).setVisible(true);
                    }
                });

            } else if (jComboBox3.getSelectedItem().toString().equalsIgnoreCase("Shape")) {
                java.awt.EventQueue.invokeLater(new Runnable() {

                    public void run() {
                        new ShapeGUI(helper).setVisible(true);
                    }
                });
            }
        } else {
            javax.swing.JOptionPane.showMessageDialog(jPanel1, "Choose Image/Images to watermark");
        }
    }

    private void reset(java.awt.event.ActionEvent evt) {
        reset();
        jProgressBar1.setValue(0);
        helper.getMainStatus().setText("Reset Successful");
    }

    /**
     * resets current setting for watermarking
     * @param  Button click event
     * 
     */
    public void reset() {
        helper.readPropertyFile();
        helper.setMainFrame(this);
        helper.setMainPanel(jPanel1);
        helper.setMainProgressBar(jProgressBar1);
        helper.setMainStatus(jLabel4);
        helper.setMainWaterMarksDetails(jPanel10);
        helper.setInPutImageTextField(jTextField1);
        helper.setOutPutImageTextField(jTextField2);
        helper.setOutputFolderName(helper.getDate());
        helper.setInputFiles(new ArrayList());
        helper.setInputFilesCaption(new ArrayList());
        worker = new Thread(new WaterMarkImages(helper, jFileListLabelStatus));
        helper.setWorker(worker);
        helper.setStop(false);
        helper.setPause(false);
        helper.setLogParam();
        helper.setExtensions();
        helper.setImageFormats();
        jTextField3.setText("600");
        jTextField4.setText("800");
        jTextField1.setText("Select Images");
        jTextField2.setText("Output Folder");
        outputImage = null;
        jComboBox1.setSelectedIndex(0);
        jComboBox2.setSelectedIndex(0);
        jComboBox3.setSelectedIndex(0);
        inputFileList = new ArrayList();
        helper.setWaterMarkerList(new ArrayList());
        jPanel11.removeAll();
        jPanel11.repaint();
        jPanel11.revalidate();
        ImagePanel.setIcon(null);
        ImagePanel.setText("");
        ImagePanel.repaint();
        ImagePanel.revalidate();
        jLabel11.setText("");
        jComboBox1.setEnabled(true);
        helper.setInputFiles(inputFileList);
        helper.setInputFiles(new ArrayList());
        helper.setOutputImageFolderPath(outputImage);
        helper.setMaxImageHeight(600);
        helper.setMaxImageWidth(800);
        helper.setWorker(worker);
        helper.setStop(false);
        helper.setPause(false);
        helper.setLosseless(true);
    }

    /**
     * Sets stop variable true and resets watremarking settings
     * @param  Button click event
     * 
     */
    private void Stop(java.awt.event.ActionEvent evt) {
        if (helper.getWorker() != null) {
            if (helper.getWorker().isAlive()) {
                helper.setStop(true);
                helper.setPause(false);
                helper.getMainStatus().setText("Watermarking Stopping...");
                inputFileList = new ArrayList();
                jTextField3.setText("Select Image");
            }

        }
    }

    /**
     * Sets pause variable true 
     * @param  Button click event
     * 
     */
    private void Pause(java.awt.event.ActionEvent evt) {
        if (helper.getWorker() != null) {
            if (helper.getWorker().isAlive()) {
                helper.setPause(true);
                helper.getMainStatus().setText("Watermarking Pausing...");
            }
        }
    }

    /**
     * Starts putting watermark on selected images
     * @param  Button click event
     * 
     */
    private void Start(java.awt.event.ActionEvent evt) {

        if (!inputFileList.isEmpty()) {
            if (outputImage != null) {
                if (Integer.parseInt(jTextField3.getText()) > 9 || Integer.parseInt(jTextField4.getText()) > 9) {
                    jLabel4.setText("Adding Watermark in Process...");
                    try {
                        helper.setInputFiles(inputFileList);
                        helper.setOutputImageFolderPath(outputImage);
                        helper.setMaxImageHeight(Integer.parseInt(jTextField3.getText()));
                        helper.setMaxImageWidth(Integer.parseInt(jTextField4.getText()));
                        jProgressBar1.setMaximum(inputFileList.size());
                        jProgressBar1.setMinimum(0);
                        jProgressBar1.setValue(0);
                        jProgressBar1.setStringPainted(true);
                        helper.createReportFile();
                        WaterMarkImages wmImage = new WaterMarkImages(helper, jFileListLabelStatus);
                        helper.setWorker(new Thread(wmImage));
                        helper.setPause(false);
                        helper.setStop(false);
                        helper.getWorker().start();
                        if (jComboBox2.getSelectedIndex() == 0) {
                            helper.setLosseless(true);
                        } else if (jComboBox2.getSelectedIndex() == 1) {
                            helper.setLosseless(false);
                        }
                    } catch (Exception ex) {
                        helper.getMainStatus().setText("Problem while watermarking ");
                        javax.swing.JOptionPane.showMessageDialog(jPanel1, ex, "Exception Raised", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                    }
                } else {
                    javax.swing.JOptionPane.showMessageDialog(jPanel1, "Height and Width cannot be less than 10 pixals");
                }
            } else {
                javax.swing.JOptionPane.showMessageDialog(jPanel1, "Choose output folder");
            }
        } else {
            javax.swing.JOptionPane.showMessageDialog(jPanel1, "Choose Image/Images to watermark");
        }
    }

    /**
     * Imports settings from external XML file validates it and sets respective values for respective components
     * @param  Button click event
     * 
     */
    private void importSettingsAction(java.awt.event.ActionEvent evt) {
        if (!inputFileList.isEmpty()) {
            jFileChooser1 = new javax.swing.JFileChooser(".");
            FileFilter filter1 = new ExtensionFileFilter("XML", new String[]{"XML"});
            jFileChooser1.setFileFilter(filter1);
            jFileChooser1.setMultiSelectionEnabled(false);
            int option = jFileChooser1.showOpenDialog(WaterMarkGUI.this);
            if (option == jFileChooser1.APPROVE_OPTION) {
                File inPutPropertyFile = jFileChooser1.getSelectedFile();
                String fileName = inPutPropertyFile.getName();
                String fileExtension = fileName.substring(fileName.length() - 4, fileName.length());
                if (fileExtension.equalsIgnoreCase(".xml")) {
                    ImportXML imXML = new ImportXML();
                    ArrayList watermarkerList = imXML.importXML(helper, inPutPropertyFile);
                    if (Boolean.parseBoolean(watermarkerList.get(0).toString())) {
                        helper.readPropertyFile();
                        helper.setMainFrame(this);
                        helper.setMainPanel(jPanel1);
                        helper.setMainProgressBar(jProgressBar1);
                        helper.setMainStatus(jLabel4);
                        helper.setMainWaterMarksDetails(jPanel10);
                        helper.setInPutImageTextField(jTextField1);
                        helper.setOutPutImageTextField(jTextField2);
                        helper.setOutputFolderName(helper.getDate());
                        worker = new Thread(new WaterMarkImages(helper, jFileListLabelStatus));
                        helper.setWorker(worker);
                        helper.setStop(false);
                        helper.setPause(false);
                        helper.setLogParam();
                        helper.setExtensions();
                        helper.setImageFormats();
                        jTextField1.setText("Select Folder");
                        jTextField2.setText("Output Folder");
                        jComboBox2.setSelectedItem(watermarkerList.get(3).toString());
                        jTextField3.setText(watermarkerList.get(1).toString());
                        jTextField4.setText(watermarkerList.get(2).toString());
                        helper.setWaterMarkerList((ArrayList) watermarkerList.get(4));
                        helper.setWaterMarkDetails();
                        helper.setMaxImageHeight(Integer.parseInt(jTextField3.getText()));
                        helper.setMaxImageWidth(Integer.parseInt(jTextField4.getText()));

                        helper.getMainStatus().setText("Import Successful");
                        helper.Info("Importing of settings from " + inPutPropertyFile.getPath() + " Successful");
                    } else {
                        helper.getMainStatus().setText("Import Unsuccessful");
                        javax.swing.JOptionPane.showMessageDialog(jPanel1, "Error in Imported file\nImport Unsuccessful");
                        reset();
                        jProgressBar1.setValue(0);
                        helper.Info("Importing of settings from " + inPutPropertyFile.getPath() + " Unsuccessful");
                    }
                }
            }
        } else {
            javax.swing.JOptionPane.showMessageDialog(jPanel1, "Choose Image/Images to watermark");
        }
    }

    /**
     * Exports current watermark settings to selected output folder
     * @param  Button click event
     *
     */
    private void ExportSettingsAction(java.awt.event.ActionEvent evt) {
        if (outputImage != null) {
            ExportXML ex = new ExportXML();
            helper.setOutputImageFolderPath(outputImage);
            try {
                ex.ExportXML(helper, outputImage, jTextField3.getText(), jTextField4.getText(), jComboBox2.getSelectedItem().toString());
                helper.getMainStatus().setText("Exporting of Settings Successful");
                javax.swing.JOptionPane.showMessageDialog(jPanel1, "Exporting of Settings File \n" + helper.getOutputImageFolderPath().getPath() + File.separator + helper.getOutputFolderName() + File.separator + "Watermark Export file.xml\nSuccessful");
            } catch (Exception exception) {
                javax.swing.JOptionPane.showMessageDialog(jPanel1, exception.getMessage());
                helper.getMainStatus().setText("Exporting of Settings Unsuccessful");
                helper.Info("Export of settings to " + helper.getOutputImageFolderPath().getPath() + File.separator + helper.getOutputFolderName() + File.separator + "Watermark Export file.xml Successful");
            }
        } else {
            javax.swing.JOptionPane.showMessageDialog(jPanel1, "Choose output folder");
        }
    }

    /**
     * Exits the application
     *
     * @param Button Click event
     */
    private void exit(java.awt.event.ActionEvent evt) {
        if (helper.getWorker() != null) {
            if (helper.getWorker().isAlive()) {
                helper.getWorker().stop();
            }
        }
        helper.warning("Exit");
        this.dispose();
        System.exit(0);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new WaterMarkGUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify
    private javax.swing.JLabel ImagePanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    public javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JFileChooser jFileChooser2;
    private Thread worker;
    // End of variables declaration
}

class ExtensionFileFilter extends FileFilter {

    String description;
    String extensions[];

    public ExtensionFileFilter(String description, String extension) {
        this(description, new String[]{extension});
    }

    public ExtensionFileFilter(String description, String extensions[]) {
        if (description == null) {
            this.description = extensions[0];
        } else {
            this.description = description;
        }
        this.extensions = (String[]) extensions.clone();
        toLower(this.extensions);
    }

    private void toLower(String array[]) {
        for (int i = 0, n = array.length; i < n; i++) {
            array[i] = array[i].toLowerCase();
        }
    }

    public String getDescription() {
        return description;
    }

    public boolean accept(File file) {
        if (file.isDirectory()) {
            return true;
        } else {
            String path = file.getAbsolutePath().toLowerCase();
            for (int i = 0, n = extensions.length; i < n; i++) {
                String extension = extensions[i];
                if ((path.endsWith(extension) && (path.charAt(path.length() - extension.length() - 1)) == '.')) {
                    return true;
                }
            }
        }
        return false;
    }
}

@SuppressWarnings("serial")
class NumericTextField extends JTextField {

    @Override
    protected Document createDefaultModel() {
        return new NumericDocument();
    }

    private static class NumericDocument extends PlainDocument {
        // The regular expression to match input against (zero or more digits)

        private final static Pattern DIGITS = Pattern.compile("\\d*");

        @Override
        public void insertString(int offs, String str, AttributeSet a) throws BadLocationException {
            // Only insert the text if it matches the regular expression
            if (str != null && DIGITS.matcher(str).matches()) {
                super.insertString(offs, str, a);
            }
        }
    }
}
