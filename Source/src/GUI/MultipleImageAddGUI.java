/*
 * Copyright (c) 2011 Hitesh Shankarrao Jyoti Sathawane, Dombivli, MH, 421201, India.
 * mailto:hiteshsathawane@gmail.com. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in 
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Redistributions in any form must be accompanied by information on
 *    how to obtain complete source code for the WaterMarker software.
 *
 *
 * This software is provided "as is", without warranty of any kind, express or 
 * implied, including but not limited to the warranties of merchantability,   
 * fitness for a particular purpose and noninfringement.  In no event shall
 * Copyright holder be liable for any claim, damages or other liability,
 * whether in an action of contract, tort or otherwise,  arising from,out of
 * or in connection with Watermarker or the use or other dealings in
 * Watermarker.
 */
package GUI;

import WaterMarker.RescaleImage;
import WatermarkHelper.ImagePreviewPanel;
import WatermarkHelper.WaterMarkHelper;
import java.awt.Frame;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.filechooser.FileFilter;
/*
 * @author Hitesh Shankarrao Jyoti Sathawane
 * Created on December 21, 2009
 * WaterMarker 3.0
 * MultipleImageAddGUI.java
 * The Class is main class to Open MultipleImageAdd GUI
 */

public class MultipleImageAddGUI extends javax.swing.JFrame {

    WaterMarkHelper multipleImageAddHelper;
    ArrayList selectedFiles = new ArrayList();
    javax.swing.JPanel[] jFileListPanel;
    javax.swing.JLabel[] jFileListLabel;
    int currentIndex = 0;

    /** Creates new form MultipleImageAddGUI */
    public MultipleImageAddGUI(WaterMarkHelper helper, WaterMarkGUI mainpanel, JTextField jTextField3) {
        multipleImageAddHelper = helper;
        multipleImageAddHelper.getMainStatus().setText(multipleImageAddHelper.getProperty("message.MultiImageAdd.open"));
        initComponents(mainpanel, jTextField3);

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents(final WaterMarkGUI mainpanel, final JTextField jTextField3) {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel3 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        ImagePanel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setTitle(multipleImageAddHelper.getProperty("title.MultiImageAdd.gui"));
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setBackground(new java.awt.Color(51, 51, 51));
        setResizable(false);
        setAlwaysOnTop(true);
        addWindowListener(new WindowAdapter() {

            public void windowClosing(WindowEvent evt) {
                Frame frame = (Frame) evt.getSource();
                frame.dispose();
                multipleImageAddHelper.setEnable(multipleImageAddHelper.getMainFrame());
                multipleImageAddHelper.getMainStatus().setText(multipleImageAddHelper.getProperty("message.MultiImageAdd.close"));
            }
        });

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));

        jLabel1.setFont(new java.awt.Font("Palatino Linotype", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 204, 204));
        jLabel1.setText("Add Multiple Images");

        jLabel2.setFont(new java.awt.Font("Palatino Linotype", 0, 11));
        jLabel2.setForeground(new java.awt.Color(255, 102, 51));
        jLabel2.setText("[?]");
        jLabel2.setToolTipText(multipleImageAddHelper.getProperty("help.MultiImageAdd"));

        jPanel2.setBackground(new java.awt.Color(51, 51, 51));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 153, 255), 1, true), "Add Images", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Palatino Linotype", 0, 11), new java.awt.Color(0, 153, 255))); // NOI18N
        jPanel2.setForeground(new java.awt.Color(51, 51, 51));

        jPanel3.setBackground(new java.awt.Color(51, 51, 51));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
                jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 358, Short.MAX_VALUE));
        jPanel3Layout.setVerticalGroup(
                jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 216, Short.MAX_VALUE));

        jScrollPane1.setViewportView(jPanel3);

        jButton1.setText("ADD");
        jButton1.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Add(evt);
            }
        });

        jButton2.setText("Delete");
        jButton2.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Delete(evt);
            }
        });
        jButton3.setText("Done");
        jButton3.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Done(evt, mainpanel, jTextField3);
            }
        });

        jButton4.setText("Cancel");
        jButton4.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Cancel(evt);
            }
        });

        ImagePanel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jPanel7.setBackground(new java.awt.Color(51, 51, 51));
        jPanel7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 255)));
        jPanel7.setForeground(new java.awt.Color(51, 51, 51));

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
                jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(ImagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE));
        jPanel7Layout.setVerticalGroup(
                jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(ImagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE));
        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup().addContainerGap().addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addGroup(jPanel2Layout.createSequentialGroup().addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false).addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(24, 24, 24)).addGroup(jPanel2Layout.createSequentialGroup().addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap()))));
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup().addContainerGap().addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE).addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup().addComponent(jButton1).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jButton2).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jButton3).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jButton4).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))).addContainerGap()));
        jLabel3.setBackground(new java.awt.Color(0, 153, 255));
        jLabel3.setFont(new java.awt.Font("Palatino Linotype", 0, 10));
        jLabel3.setForeground(new java.awt.Color(0, 153, 255));
        jLabel3.setText("");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel1Layout.createSequentialGroup().addContainerGap().addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup().addComponent(jLabel1).addGap(161, 161, 161).addComponent(jLabel2)).addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(jLabel3)).addContainerGap()));
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel1Layout.createSequentialGroup().addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel1Layout.createSequentialGroup().addContainerGap().addComponent(jLabel2)).addComponent(jLabel1)).addGap(5, 5, 5).addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jLabel3).addContainerGap(18, Short.MAX_VALUE)));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width - 538) / 2, (screenSize.height - 365) / 2, 538, 365);
    }// </editor-fold>

    /** Add Multiple Images to select file list
     * 
     */
    private void Add(java.awt.event.ActionEvent evt) {
        jFileChooser1 = new javax.swing.JFileChooser(".");
        ImagePreviewPanel preview = new ImagePreviewPanel();
        jFileChooser1.setAccessory(preview);
        jFileChooser1.addPropertyChangeListener(preview);
        jFileChooser1.setMultiSelectionEnabled(true);
        FileFilter filter1 = new MultipleImageExtensionFileFilter(multipleImageAddHelper.getProperty("constants.jfilechooser.filter"), multipleImageAddHelper.getImageFormats());
        jFileChooser1.setFileFilter(filter1);
        int option = jFileChooser1.showOpenDialog(MultipleImageAddGUI.this);
        if (option == jFileChooser1.APPROVE_OPTION) {
            File[] inputImageFiles = jFileChooser1.getSelectedFiles();
            String filelist = "";
            for (int i = 0; i < inputImageFiles.length; i++) {
                File file = inputImageFiles[i];
                filelist = filelist + file.getName();
                if (multipleImageAddHelper.checkExtension(file.getName())) {
                    if (!selectedFiles.contains(file)) {
                        selectedFiles.add(file);
                        String textval = "";
                        String text[] = new String[1];
                        multipleImageAddHelper.getInputFilesCaption().add(text);
                        jButton1.setText("ADD More");
                    }
                }
            }

        }
        jPanel3.removeAll();
        setFileList();
    }

    /** set file list to display int the list panel
     * 
     */
    private void setFileList() {
        if (!selectedFiles.isEmpty()) {
            jFileListPanel = new javax.swing.JPanel[selectedFiles.size()];
            jFileListLabel = new javax.swing.JLabel[selectedFiles.size()];
            jPanel3.setLayout(new BoxLayout(jPanel3, BoxLayout.Y_AXIS));
            int i = 0;
            multipleImageAddHelper.setInputFilesCaption(new ArrayList());
            for (Iterator it = selectedFiles.iterator(); it.hasNext();) {
                String textval = "";
                String texts[] = new String[1];
                multipleImageAddHelper.getInputFilesCaption().add(texts);
                jFileListPanel[i] = new JPanel();
                jFileListPanel[i].setBackground(new java.awt.Color(51, 51, 51));
                jFileListPanel[i].setLayout(new BoxLayout(jFileListPanel[i], BoxLayout.Y_AXIS));
                jFileListLabel[i] = new JLabel();
                File inputfile = (File) it.next();
                String text = inputfile.getPath();
                jFileListLabel[i].setText(text);
                jFileListLabel[i].setBackground(new java.awt.Color(51, 51, 51));
                jFileListLabel[i].setForeground(new java.awt.Color(255, 153, 0));
                final int index = i;
                jFileListLabel[i].addMouseListener(new java.awt.event.MouseAdapter() {

                    public void mouseClicked(java.awt.event.MouseEvent evt) {
                        SetSelection(evt, index);
                    }
                });
                jFileListPanel[i].add(jFileListLabel[i]);
                jPanel3.add(jFileListPanel[i]);
                jPanel3.revalidate();
                jPanel3.repaint();
                i++;
            }
            jFileListPanel[0].setBackground(new java.awt.Color(255, 255, 153));
            File firstImage = (File) selectedFiles.get(0);
            BufferedImage image = multipleImageAddHelper.getPreview(firstImage);
            jLabel3.setText(firstImage.getPath());
            RescaleImage previewImage = new RescaleImage();
            BufferedImage result = previewImage.RescaleImage(multipleImageAddHelper, image, 90, 120);
            ImageIcon i2i = new ImageIcon(result);
            ImagePanel.setIcon(i2i);
            jPanel7.repaint();
            jPanel7.revalidate();

        }
    }

    /** set preview of selection
     * 
     */
    private void SetSelection(java.awt.event.MouseEvent evt, int index) {
        currentIndex = index;
        File firstImage = (File) selectedFiles.get(index);
        BufferedImage image = multipleImageAddHelper.getPreview(firstImage);
        jLabel3.setText(firstImage.getPath());
        for (int x = 0; x < jFileListPanel.length; x++) {
            jFileListPanel[x].setBackground(new java.awt.Color(51, 51, 51));

        }
        jFileListPanel[index].setBackground(new java.awt.Color(255, 255, 153));
        RescaleImage previewImage = new RescaleImage();
        BufferedImage result = previewImage.RescaleImage(multipleImageAddHelper, image, 90, 120);
        ImageIcon i2i = new ImageIcon(result);
        ImagePanel.setIcon(i2i);
        jPanel7.repaint();
        jPanel7.revalidate();

    }

    /** add all the selected image to input file list
     * 
     */
    private void Done(java.awt.event.ActionEvent evt, WaterMarkGUI mainpanel, JTextField jTextField3) {
        multipleImageAddHelper.setCompleteImageList(0);
        if (!selectedFiles.isEmpty()) {
            multipleImageAddHelper.getMainProgressBar().setValue(0);
            mainpanel.inputFileList = new ArrayList();
            mainpanel.inputFileList.addAll(selectedFiles);
            jTextField3.setText(multipleImageAddHelper.getProperty("message.MultiImageAdd.success"));
            jTextField3.setToolTipText(jTextField3.getText());
            multipleImageAddHelper.setInputParentFolderPath(null);
            multipleImageAddHelper.setInputFiles(mainpanel.inputFileList);
            mainpanel.jPanel11.removeAll();
            mainpanel.setFileList();
            this.dispose();
            multipleImageAddHelper.setEnable(multipleImageAddHelper.getMainFrame());
        } else {
            javax.swing.JOptionPane.showMessageDialog(jPanel1, multipleImageAddHelper.getProperty("message.warning.imageFilter"));
        }
    }

    /** Delete selected file from list
     * 
     */
    private void Delete(java.awt.event.ActionEvent evt) {
        if (!selectedFiles.isEmpty()) {
            selectedFiles.remove(currentIndex);
            jPanel3.removeAll();
            jPanel3.repaint();
            jPanel3.revalidate();
            ImagePanel.setIcon(null);
            ImagePanel.revalidate();
            ImagePanel.repaint();
            setFileList();
        }
        if (selectedFiles.isEmpty()) {
            jButton1.setText("ADD");
        }
    }

    /**cancel multiple Image watermark GUI
     * 
     */
    private void Cancel(java.awt.event.ActionEvent evt) {
        this.dispose();
        multipleImageAddHelper.setEnable(multipleImageAddHelper.getMainFrame());
        multipleImageAddHelper.getMainStatus().setText(multipleImageAddHelper.getProperty("message.MultiImageAdd.close"));
    }
    // Variables declaration - do not modify
    private JFileChooser jFileChooser1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel ImagePanel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration
}

class MultipleImageExtensionFileFilter extends FileFilter {

    String description;
    String extensions[];

    public MultipleImageExtensionFileFilter(String description, String extension) {
        this(description, new String[]{extension});
    }

    public MultipleImageExtensionFileFilter(String description, String extensions[]) {
        if (description == null) {
            this.description = extensions[0];
        } else {
            this.description = description;
        }
        this.extensions = (String[]) extensions.clone();
        toLower(this.extensions);
    }

    private void toLower(String array[]) {
        for (int i = 0, n = array.length; i < n; i++) {
            array[i] = array[i].toLowerCase();
        }
    }

    public String getDescription() {
        return description;
    }

    public boolean accept(File file) {
        if (file.isDirectory()) {
            return true;
        } else {
            String path = file.getAbsolutePath().toLowerCase();
            for (int i = 0, n = extensions.length; i < n; i++) {
                String extension = extensions[i];
                if ((path.endsWith(extension) && (path.charAt(path.length() - extension.length() - 1)) == '.')) {
                    return true;
                }
            }
        }
        return false;
    }
}
